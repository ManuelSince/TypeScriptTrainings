{"version":3,"file":"project.cjs.production.min.js","sources":["../src/models/Entreprise.ts","../src/models/Employee.ts","../src/index.ts"],"sourcesContent":["import { IObservable } from '../interfaces/IObserverPattern';\r\nimport { Employee } from './Employee'\r\n\r\nexport class Entreprise implements IObservable{\r\n    private name: string;\r\n    private employees: Employee[] = [];\r\n    private earnings: number;\r\n    constructor (name: string, employees: Employee[], earnings: number) {\r\n        this.name = name;\r\n        this.employees = employees;\r\n        this.notify();\r\n        this.earnings = earnings;\r\n    }\r\n    public getName (): string { return this.name}\r\n    public getEmployees (): Employee[] { return this.employees }\r\n    public getEarnings (): number { return this.earnings }\r\n    public setName (name: string): void { this.name = name }\r\n    public setEmployees (employees: Employee[]): void { this.employees = employees}\r\n    public setEarnings (earnings: number): void { this.earnings = earnings }\r\n    public greet () { console.log(`The ${this.name} has ${this.employees.length} employees and earn ${this.earnings}`)};\r\n    public addEmployee (employee: Employee) {\r\n        this.employees.push(employee);\r\n        this.notify();\r\n    }\r\n    public removingEmployee (employee: Employee) {\r\n        const index = this.employees.findIndex(employee_in => employee_in.getLastname() === employee.getLastname() && employee_in.getFirstname() === employee.getFirstname());\r\n        console.log(`firing employee ${employee.getFirstname()} ${employee.getLastname()}`);\r\n        this.employees.splice(index, 1);\r\n        this.notify();\r\n    }\r\n    public attach (employee: Employee) { this.employees.push(employee)}\r\n    public detach (employee: Employee) {\r\n        const index = this.employees.findIndex(employee_in => employee_in.getLastname() === employee.getLastname() && employee_in.getFirstname() === employee.getFirstname());\r\n        this.employees.splice(index, 1);\r\n    }\r\n    public notify (): void {   \r\n        for (const employee of this.employees) {\r\n            console.log(`Subject : Notifying observer ${employee.getFirstname()} ${employee.getLastname()} ...`);\r\n            employee.update();\r\n        }\r\n    }\r\n\r\n}","import { IObserver } from '../interfaces/IObserverPattern'\r\nimport { Entreprise } from './Entreprise'\r\nexport class Person {\r\n    protected firstname: string;\r\n    protected lastname: string;\r\n    constructor(firstname: string, lastname: string ) {\r\n        this.firstname = firstname;\r\n        this.lastname = lastname;\r\n    }\r\n    getFirstname (): string { return this.firstname };\r\n    getLastname (): string { return this.lastname};\r\n    setFirstname (firstname: string): void { this.firstname = firstname };\r\n    setLastname (lastname: string): void { this.lastname = lastname};\r\n    greet () { console.log(`hello i am ${this.firstname} ${this.lastname}`)}\r\n}\r\nexport class Employee extends Person implements IObserver{\r\n    private entreprise: Entreprise\r\n    private job: string;\r\n    private wage: number;\r\n    constructor(entreprise: Entreprise, firstname: string, lastname: string, job: string, wage: number ) {\r\n        super(firstname, lastname);\r\n        this.entreprise = entreprise;\r\n        this.job = job;\r\n        this.wage = wage;\r\n    }\r\n    getJob (): string { return this.job };\r\n    getWage (): number { return this.wage };\r\n    getEntreprise (): Entreprise { return this.entreprise };\r\n    setFirstname (firstname: string): void { this.firstname = firstname };\r\n    setLastname (lastname: string): void { this.lastname = lastname};\r\n    greet () { super.greet(); console.log(`i work as ${this.job} with a wage of ${this.wage}`)}\r\n    update () { console.log(`company employees are growing ... ${this.entreprise.getEmployees().length}`) }\r\n}","// import {Worker} from './models/Person';\nimport { Entreprise } from './models/Entreprise';\nimport { Employee } from './models/Employee'\n\n// export const sum = (a: number, b: number) => {\n//   if ('development' === process.env.NODE_ENV) {\n//     console.log('boop');\n//   }\n//   return a + b;\n// };\n\n//Observer Pattern implementation using Entreprise (observable) and employees as observers :\n\nconst colaCompany: Entreprise = new Entreprise(\"coca cola company\", [], 248900);\n// const employees: Employee[] = [];\nconst trump = new Employee(colaCompany, \"Donald\", \"Trump\", \"CEO\", 25000);\ntrump.greet();\ncolaCompany.addEmployee(trump);\nconst hillary = new Employee(colaCompany, \"hillary\", \"Clinton\", \"vice-presidente\", 21000);\nhillary.greet();\ncolaCompany.addEmployee(hillary);\nconst fabieng = new Employee(colaCompany, \"fabieng\", \"shit\", \"trainee\", 500);\nfabieng.greet();\ncolaCompany.addEmployee(fabieng);\ncolaCompany.removingEmployee(hillary)\n\n// Pattern to set attribute using a single method taking a unique object parameter :\n\n// let louis = new Worker('Since', 'louis', 18, 'General Electric','Advanced Visualization', 'engineer', 2765);\n// let payload = {salary: 3485, firstname: 'Manuel'};\n// louis.updateFields(payload)\n// console.log(louis.describe());\n\n"],"names":["Entreprise","name","employees","earnings","notify","getName","this","getEmployees","getEarnings","setName","setEmployees","setEarnings","greet","console","log","length","addEmployee","employee","push","removingEmployee","index","findIndex","employee_in","getLastname","getFirstname","splice","attach","detach","update","Employee","entreprise","firstname","lastname","job","wage","getJob","getWage","getEntreprise","setFirstname","setLastname","colaCompany","trump","hillary","fabieng"],"mappings":"2HAGaA,wBAIIC,EAAcC,EAAuBC,kBAFlB,QAGvBF,KAAOA,OACPC,UAAYA,OACZE,cACAD,SAAWA,6BAEbE,QAAA,kBAA4BC,KAAKL,QACjCM,aAAA,kBAAqCD,KAAKJ,aAC1CM,YAAA,kBAAgCF,KAAKH,YACrCM,QAAA,SAASR,QAA2BA,KAAOA,KAC3CS,aAAA,SAAcR,QAAoCA,UAAYA,KAC9DS,YAAA,SAAaR,QAA+BA,SAAWA,KACvDS,MAAA,WAAWC,QAAQC,WAAWR,KAAKL,aAAYK,KAAKJ,UAAUa,8BAA6BT,KAAKH,aAChGa,YAAA,SAAaC,QACXf,UAAUgB,KAAKD,QACfb,YAEFe,iBAAA,SAAkBF,OACfG,EAAQd,KAAKJ,UAAUmB,WAAU,SAAAC,UAAeA,EAAYC,gBAAkBN,EAASM,eAAiBD,EAAYE,iBAAmBP,EAASO,kBACtJX,QAAQC,uBAAuBG,EAASO,mBAAkBP,EAASM,oBAC9DrB,UAAUuB,OAAOL,EAAO,QACxBhB,YAEFsB,OAAA,SAAQT,QAA2Bf,UAAUgB,KAAKD,MAClDU,OAAA,SAAQV,OACLG,EAAQd,KAAKJ,UAAUmB,WAAU,SAAAC,UAAeA,EAAYC,gBAAkBN,EAASM,eAAiBD,EAAYE,iBAAmBP,EAASO,uBACjJtB,UAAUuB,OAAOL,EAAO,MAE1BhB,OAAA,0sBACoBE,KAAKJ,0BAAW,KAA5Be,UACPJ,QAAQC,oCAAoCG,EAASO,mBAAkBP,EAASM,sBAChFN,EAASW,gBCvBRC,iCAIGC,EAAwBC,EAAmBC,EAAkBC,EAAaC,8BAC5EH,EAAWC,UACZF,WAAaA,IACbG,IAAMA,IACNC,KAAOA,sHAEhBC,OAAA,kBAA2B7B,KAAK2B,OAChCG,QAAA,kBAA4B9B,KAAK4B,QACjCG,cAAA,kBAAsC/B,KAAKwB,cAC3CQ,aAAA,SAAcP,QAAgCA,UAAYA,KAC1DQ,YAAA,SAAaP,QAA+BA,SAAWA,KACvDpB,MAAA,uBAAiBA,iBAASC,QAAQC,iBAAiBR,KAAK2B,uBAAsB3B,KAAK4B,SACnFN,OAAA,WAAYf,QAAQC,yCAAyCR,KAAKwB,WAAWvB,eAAeQ,kCA1BhFgB,EAAmBC,QACtBD,UAAYA,OACZC,SAAWA,6BAEpBR,aAAA,kBAAiClB,KAAKyB,aACtCR,YAAA,kBAAgCjB,KAAK0B,YACrCM,aAAA,SAAcP,QAAgCA,UAAYA,KAC1DQ,YAAA,SAAaP,QAA+BA,SAAWA,KACvDpB,MAAA,WAAWC,QAAQC,kBAAkBR,KAAKyB,cAAazB,KAAK0B,iBCA1DQ,EAA0B,IAAIxC,EAAW,oBAAqB,GAAI,QAElEyC,EAAQ,IAAIZ,EAASW,EAAa,SAAU,QAAS,MAAO,MAClEC,EAAM7B,QACN4B,EAAYxB,YAAYyB,GACxB,IAAMC,EAAU,IAAIb,EAASW,EAAa,UAAW,UAAW,kBAAmB,MACnFE,EAAQ9B,QACR4B,EAAYxB,YAAY0B,GACxB,IAAMC,EAAU,IAAId,EAASW,EAAa,UAAW,OAAQ,UAAW,KACxEG,EAAQ/B,QACR4B,EAAYxB,YAAY2B,GACxBH,EAAYrB,iBAAiBuB"}